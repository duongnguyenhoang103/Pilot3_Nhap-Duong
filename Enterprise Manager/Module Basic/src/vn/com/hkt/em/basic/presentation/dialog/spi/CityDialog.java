/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CityDialog.java
 *
 * Created on May 10, 2012, 3:08:21 PM
 */
package vn.com.hkt.em.basic.presentation.dialog.spi;

import java.awt.Color;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.xml.crypto.dsig.keyinfo.RetrievalMethod;
import org.openide.util.lookup.ServiceProvider;
import vn.com.hkt.em.basic.business.provide.dialog.spi.CityDialogProvider;
import vn.com.hkt.em.basic.data.entities.City;
import vn.com.hkt.em.basic.data.entities.Country;
import vn.com.hkt.em.basic.presentation.dialog.api.ICityDialog;
import vn.com.hkt.em.basic.presentation.dialog.spi.tablemodel.CityTableModel;

/**
 *
 * @author duong
 */
@ServiceProvider(service = ICityDialog.class)
public class CityDialog extends javax.swing.JDialog implements ICityDialog {

    private JComboBox comboBox;
    private Country countryFirst;
    private CityDialogProvider provider = new CityDialogProvider();

    /** Creates new form CityDialog */
    public CityDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public CityDialog() {
        initComponents();
        this.setModal(true);
        this.setLocationRelativeTo(null);
        resetData();
        loadTable();
        loadCbCountry();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbCityName = new javax.swing.JLabel();
        lbCityCode = new javax.swing.JLabel();
        lbCountry = new javax.swing.JLabel();
        txtCityName = new javax.swing.JTextField();
        txtCityCode = new javax.swing.JTextField();
        cbCountry = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnReset = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCity = new javax.swing.JTable();
        lbMessenger = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        lbCityName.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.lbCityName.text")); // NOI18N

        lbCityCode.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.lbCityCode.text")); // NOI18N

        lbCountry.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.lbCountry.text")); // NOI18N

        txtCityName.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.txtCityName.text")); // NOI18N
        txtCityName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCityNameCaretUpdate(evt);
            }
        });

        txtCityCode.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.txtCityCode.text")); // NOI18N

        jScrollPane1.setViewportView(txtDescription);

        btnReset.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.btnReset.text")); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnAdd.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.btnAdd.text")); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.btnEdit.text")); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRemove.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.btnRemove.text")); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        tableCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableCity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCityMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableCity);

        lbMessenger.setForeground(new java.awt.Color(255, 0, 0));
        lbMessenger.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.lbMessenger.text")); // NOI18N

        btnRefresh.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.btnRefresh.text")); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(CityDialog.class, "CityDialog.jLabel4.text_1")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCityCode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCityName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnReset)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAdd)
                                .addGap(6, 6, 6)
                                .addComponent(btnRefresh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbCountry, javax.swing.GroupLayout.Alignment.LEADING, 0, 178, Short.MAX_VALUE)
                                    .addComponent(txtCityCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                    .addComponent(txtCityName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lbMessenger, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCityName)
                            .addComponent(txtCityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCityCode)
                            .addComponent(txtCityCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCountry)
                            .addComponent(cbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(btnAdd)
                    .addComponent(btnRefresh)
                    .addComponent(btnEdit)
                    .addComponent(btnRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbMessenger)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        resetData();
    }//GEN-LAST:event_btnResetActionPerformed

private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    addData(0);
}//GEN-LAST:event_btnAddActionPerformed

private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
    provider.refreshData();
    refreshData();

}//GEN-LAST:event_btnRefreshActionPerformed

private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    editData();
}//GEN-LAST:event_btnEditActionPerformed

private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    removeData();
}//GEN-LAST:event_btnRemoveActionPerformed

private void txtCityNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCityNameCaretUpdate
    if (txtCityName.getText().isEmpty()) {
        lbCityName.setForeground(Color.red);
    } else {
        lbCityName.setForeground(Color.black);
    }
}//GEN-LAST:event_txtCityNameCaretUpdate

private void tableCityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCityMouseClicked
    if (evt.getClickCount() >= 1) {
        provider.setDataView(provider.getListCity().get(tableCity.getSelectedRow()));
        // hien thi len cac text
        refreshData();
    }
}//GEN-LAST:event_tableCityMouseClicked
    // khi dong form load  lai dl vua them 
private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    if (comboBox != null) {
//            List<City> lc = provider.getListCity(countryFirst);
//            lc.add(0, null);
//            comboBox.setModel(new DefaultComboBoxModel(lc.toArray()));
        comboBox.setModel(new DefaultComboBoxModel(provider.getListCity().toArray()));
    }

    // comboBox.setModel(new DefaultComboBoxModel(provider.getListCity().toArray()));
}//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CityDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                CityDialog dialog = new CityDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox cbCountry;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbCityCode;
    private javax.swing.JLabel lbCityName;
    private javax.swing.JLabel lbCountry;
    private javax.swing.JLabel lbMessenger;
    private javax.swing.JTable tableCity;
    private javax.swing.JTextField txtCityCode;
    private javax.swing.JTextField txtCityName;
    private javax.swing.JTextArea txtDescription;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setCountryFirst(Country countryFirst) {
        this.countryFirst = countryFirst;
        loadCbCountry();
    }

    @Override
    public void setComboBox(JComboBox comboBox) {
        this.comboBox = comboBox;
    }

    @Override
    public String getDescriptionPanel() {
        return "Giao diện chỉnh sủa thành phố";
    }

    @Override
    public void resetData() {// 
        provider.setDataView(new City());// tao moi BE
        txtCityCode.setText("");
        txtCityName.setText("");
        txtDescription.setText("");
        btnAdd.setEnabled(true);
        btnRefresh.setEnabled(false);
        btnEdit.setEnabled(false);
        btnRemove.setEnabled(false);
        //    provider.setDataView(new City());
        //  loadCbCountry();
        lbMessenger.setVisible(false);
        lbMessenger.setText("Hãy xem lại các phần bị bôi đỏ");
         try { //lay BE cua Country
            Country country = (Country) cbCountry.getSelectedItem();
            provider.getDataViewCurrent().setIdCountry(country.getId());

        } catch (Exception e) {
            provider.getDataViewCurrent().setIdCountry(0);
        }
    }

    private void getData() { // lay du lieu dien tu tren txt xuong table (provider)
        //provide.getDAta. truyen txt vao 

        provider.getDataViewCurrent().setCityCode(txtCityCode.getText());
        provider.getDataViewCurrent().setCityName(txtCityName.getText());
        provider.getDataViewCurrent().setDescription(txtDescription.getText());
        try { //lay BE cua Country
            Country country = (Country) cbCountry.getSelectedItem();
            provider.getDataViewCurrent().setIdCountry(country.getId());

        } catch (Exception e) {
            provider.getDataViewCurrent().setIdCountry(0);
        }
    }

    @Override
    public long addData(long idParent) { // luu dl tu tren giao dien xuong table provider
        getData();
        if (provider.addData(idParent) < 0) {
            lbMessenger.setText("Hãy xem lại các phần bị bôi đỏ");
            lbMessenger.setVisible(true);
        } else {
            lbMessenger.setVisible(false);
            resetData();
            loadTable();
        }
        return provider.getDataViewCurrent().getId();

    }

    @Override
    public void refreshData() { // hien thi du lieu tu table len cac txt
        txtCityCode.setText(provider.getDataViewCurrent().getCityCode());
        txtCityName.setText(provider.getDataViewCurrent().getCityName());
        txtDescription.setText(provider.getDataViewCurrent().getDescription());

        if (provider.getDataViewCurrent().getIdCountry() > 0) {
            for (int i = 0; i < cbCountry.getItemCount(); i++) {
                if (cbCountry.getItemAt(i) != null
                        && ((Country) cbCountry.getItemAt(i)).getId() == provider.getDataViewCurrent().getIdCountry()) {
                    cbCountry.setSelectedIndex(i);
                    break;
                }
            }
        }//       else {
//            cbCountry.setSelectedIndex(-1);// load lai ban dau sau  khi them , select dong khac 
//        }
        canEditData();
    }

    @Override
    public void canEditData() {
        btnAdd.setEnabled(false);
        btnRefresh.setEnabled(true);
        btnEdit.setEnabled(true);
        btnRemove.setEnabled(true);
    }

    @Override
    public long editData() { // lay dl tu tableSelect // sau do getDAta
        getData();
        if (provider.editData() < 0) {
            lbMessenger.setText("Hãy xem lại các phần bị bôi đỏ");
            lbMessenger.setVisible(true);
            return ID_FAILD;
        } else {
            lbMessenger.setVisible(false);
            resetData();
            loadTable();
            return provider.getDataViewCurrent().getId(); // 
        }
    }

    @Override
    public long removeData() {
        //lay id de xoa
        long id = provider.getDataViewCurrent().getId();
        if (provider.removeData() < 0) {
            lbMessenger.setText("Hãy chắc chắn là bạn đã chọn 1 quốc gia để xóa");
            lbMessenger.setVisible(true);
            return ID_FAILD;
        } else {
            lbMessenger.setVisible(false);
            resetData();
            loadTable();
            return id;
        }
    }

    @Override
    public int getFunction() {
        return ID_FAILD;
    }

    @Override
    public boolean checkData() {
        if (lbCityName.getForeground() == Color.red
                || lbCityName.getForeground() == Color.red
                || lbCountry.getForeground() == Color.red) {
            lbMessenger.setVisible(true);
            lbMessenger.setText("Hãy chú ý dữ liệu những phần bị đỏ");
            return false;
        } else {
            lbMessenger.setVisible(false);
            return true;
        }
    }

    @Override
    public void loadDefault() {
    }

    private void loadTable() {
        provider.loadAllCities(); // load toan bo danh sach city len roi moi mo form 
        CityTableModel cityTableModel = new CityTableModel(provider.getListCity());
        tableCity.setModel(cityTableModel);
    }

    private void loadCbCountry() {
        resetData();
        List<Country> listCountrys = provider.getListCountry();
        cbCountry.setModel(new DefaultComboBoxModel(listCountrys.toArray()));
    }
}
