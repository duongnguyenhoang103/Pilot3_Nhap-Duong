/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelControlShowListInformation.java
 *
 * Created on Apr 9, 2012, 2:08:04 PM
 */
package vn.com.hkt.em.common.gui.panel.controlshow.spi;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import vn.com.hkt.em.common.gui.controlshow.api.IControlShowListInformation;
import vn.com.hkt.em.common.gui.panel.controlshow.api.IPanelControlShowTotal;
import vn.com.hkt.em.common.gui.panel.show.api.IPanelShowListInformation;

/**
 *
 * @author BinLe
 */
public class PanelControlShowListInformation extends javax.swing.JPanel implements IPanelControlShowTotal {

    private List<IPanelShowListInformation> panelShowListInformations;
    private List<Long> listIdParentShow;
    private final IControlShowListInformation controlShowListInformation;
    private IPanelShowListInformation panelShowListInformationChoise;

    /** Creates new form PanelControlShowListInformation */
    public PanelControlShowListInformation(IControlShowListInformation controlShowListInformation) {
        initComponents();
        this.controlShowListInformation = controlShowListInformation;
        this.panelShowListInformations = new ArrayList<IPanelShowListInformation>();
        for (int i = 0; i < controlShowListInformation.getListPanelShow().size(); i++) {
            if (controlShowListInformation.getListPanelShow().get(i) instanceof IPanelShowListInformation) {
                this.panelShowListInformations.add((IPanelShowListInformation) controlShowListInformation.getListPanelShow().get(i));
            }
        }
        cbPanelShow.setModel(new DefaultComboBoxModel(panelShowListInformations.toArray()));
        controlShowListInformation.setPanelControlShowListInformation(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.HKT
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbPanelShow = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();

        cbPanelShow.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPanelShow.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbPanelShowItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(345, Short.MAX_VALUE)
                .addComponent(cbPanelShow, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cbPanelShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbPanelShowItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbPanelShowItemStateChanged
        loadPanelShowChoise();
    }//GEN-LAST:event_cbPanelShowItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbPanelShow;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void loadData() {
        panelShowListInformations.get(0).loadData(listIdParentShow);
        for (int i = 1; i < panelShowListInformations.size(); i++) {
            panelShowListInformations.get(i).loadData(listIdParentShow);
        }
        loadPanelShowChoise();
    }

    /**
     * Truyền vào danh sách các giao diện hiển thị theo thứ tự tăng dần của Level từ 1->>n
     * @param panelShowListInformations 
     */
    public void setListPanelControlShowListInformation(List<IPanelShowListInformation> panelShowListInformations) {
        this.panelShowListInformations = panelShowListInformations;
        cbPanelShow.setModel(new DefaultComboBoxModel(panelShowListInformations.toArray()));
        loadPanelShowChoise();
    }

    /**
     * Hiển thị giao diện danh sách thông tin được họn
     */
    private void loadPanelShowChoise() {
        try {
            panelShowListInformationChoise = (IPanelShowListInformation) cbPanelShow.getSelectedItem();
            if (panelShowListInformationChoise instanceof JPanel) {
                panelShowListInformationChoise.loadData(listIdParentShow);
                jScrollPane1.setViewportView((JPanel) panelShowListInformationChoise);
            }
        } catch (Exception e) {
            jScrollPane1.setViewportView(new JPanel());
        }
    }

    /**
     * Truyền vào danh sách id các đối tượng ở giao diện cha thể hiện để cho các
     * giao diện con thể hiện tương ứng.
     * @param listIdParentShow :List<Long>
     * danh sách id đối tượng thể hiện tại giao diện cha
     */
    public void setListIdParentShow(List<Long> listIdParentShow) {
        this.listIdParentShow = listIdParentShow;
    }

    public void loadDefault() {
        listIdParentShow = null;
        panelShowListInformations.get(0).loadData(listIdParentShow);
        for (int i = 1; i < panelShowListInformations.size(); i++) {
            panelShowListInformations.get(i).loadData(listIdParentShow);
        }
        loadPanelShowChoise();
    }
}
