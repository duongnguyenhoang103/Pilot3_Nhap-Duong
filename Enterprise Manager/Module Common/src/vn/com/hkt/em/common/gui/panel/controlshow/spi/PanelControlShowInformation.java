/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelControlShowInformation.java
 *
 * Created on Apr 6, 2012, 10:10:56 AM
 */
package vn.com.hkt.em.common.gui.panel.controlshow.spi;

import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import vn.com.hkt.em.common.gui.controlshow.api.IControlShowInformation;
import vn.com.hkt.em.common.gui.panel.controlshow.api.IPanelControlShowTotal;
import vn.com.hkt.em.common.gui.panel.show.api.IPanelShowInformation;

/**
 * Giao diện diều khiển hiển thị thông tin 
 * @author BinLe
 */
public class PanelControlShowInformation extends javax.swing.JPanel implements IPanelControlShowTotal {

    public static final long FUNCTION_CREATE = 1;
    public static final long FUNCTION_EDIT = 2;
    private List<IPanelShowInformation> panelShowInformations;
    private List<JPanel> listPanelGroup = new ArrayList<JPanel>();
    private IControlShowInformation controlShowInformation;
    private int numberPanelInGroup = 2;
    private int indexChoise = 0;
    private List<JLabel> listLabelInformation;

    /** Creates new form PanelControlShowInformation */
    public PanelControlShowInformation(IControlShowInformation controlShowInformation) {
        initComponents();
        this.controlShowInformation = controlShowInformation;
        this.panelShowInformations = new ArrayList<IPanelShowInformation>();
        for (int i = 0; i < controlShowInformation.getListPanelShow().size(); i++) {
            if (controlShowInformation.getListPanelShow().get(i) instanceof IPanelShowInformation) {
                this.panelShowInformations.add((IPanelShowInformation) controlShowInformation.getListPanelShow().get(i));
            }
        }
        showPanelInformations();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelShowListInformation = new javax.swing.JPanel();
        lbNumberPanel = new javax.swing.JLabel();
        txtNumberPanel = new javax.swing.JTextField();
        panelListInformation = new javax.swing.JPanel();
        panelShow = new javax.swing.JPanel();
        scrollPaneShow = new javax.swing.JScrollPane();
        btnPreview = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();

        panelShowListInformation.setBackground(new java.awt.Color(255, 255, 255));

        lbNumberPanel.setText(org.openide.util.NbBundle.getMessage(PanelControlShowInformation.class, "PanelControlShowInformation.lbNumberPanel.text")); // NOI18N

        txtNumberPanel.setText(org.openide.util.NbBundle.getMessage(PanelControlShowInformation.class, "PanelControlShowInformation.txtNumberPanel.text")); // NOI18N
        txtNumberPanel.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtNumberPanelCaretUpdate(evt);
            }
        });

        panelListInformation.setOpaque(false);

        javax.swing.GroupLayout panelListInformationLayout = new javax.swing.GroupLayout(panelListInformation);
        panelListInformation.setLayout(panelListInformationLayout);
        panelListInformationLayout.setHorizontalGroup(
            panelListInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );
        panelListInformationLayout.setVerticalGroup(
            panelListInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelShowListInformationLayout = new javax.swing.GroupLayout(panelShowListInformation);
        panelShowListInformation.setLayout(panelShowListInformationLayout);
        panelShowListInformationLayout.setHorizontalGroup(
            panelShowListInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowListInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelShowListInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShowListInformationLayout.createSequentialGroup()
                        .addComponent(lbNumberPanel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNumberPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(panelListInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelShowListInformationLayout.setVerticalGroup(
            panelShowListInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowListInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelShowListInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNumberPanel)
                    .addComponent(txtNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelListInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/em/common/icon/Prev.png"))); // NOI18N
        btnPreview.setText(org.openide.util.NbBundle.getMessage(PanelControlShowInformation.class, "PanelControlShowInformation.btnPreview.text")); // NOI18N
        btnPreview.setBorder(null);
        btnPreview.setContentAreaFilled(false);
        btnPreview.setFocusable(false);
        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vn/com/hkt/em/common/icon/Next.png"))); // NOI18N
        btnNext.setText(org.openide.util.NbBundle.getMessage(PanelControlShowInformation.class, "PanelControlShowInformation.btnNext.text")); // NOI18N
        btnNext.setContentAreaFilled(false);
        btnNext.setFocusable(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShowLayout = new javax.swing.GroupLayout(panelShow);
        panelShow.setLayout(panelShowLayout);
        panelShowLayout.setHorizontalGroup(
            panelShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShowLayout.createSequentialGroup()
                .addComponent(btnPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneShow, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelShowLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnNext, btnPreview});

        panelShowLayout.setVerticalGroup(
            panelShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
            .addComponent(btnPreview, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
            .addComponent(scrollPaneShow, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panelShowListInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelShowListInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
        if (indexChoise > 0) {
            indexChoise--;
            showInformationChoise();
        }
    }//GEN-LAST:event_btnPreviewActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (indexChoise < panelShowInformations.size() - 1) {
            indexChoise++;
            showInformationChoise();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void txtNumberPanelCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtNumberPanelCaretUpdate
        try {
            int x = Integer.valueOf(txtNumberPanel.getText());
            if (x == numberPanelInGroup) {
                return;
            }
            numberPanelInGroup = x;
            lbNumberPanel.setForeground(Color.black);
            loadGroup();
        } catch (Exception e) {
            numberPanelInGroup = 0;
            lbNumberPanel.setForeground(Color.red);
        }
    }//GEN-LAST:event_txtNumberPanelCaretUpdate
    /**
     * thực hiện gọi dialog hiển thị thông tin bổ xung cho giao diện thông tin
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPreview;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbNumberPanel;
    private javax.swing.JPanel panelListInformation;
    private javax.swing.JPanel panelShow;
    private javax.swing.JPanel panelShowListInformation;
    private javax.swing.JScrollPane scrollPaneShow;
    private javax.swing.JTextField txtNumberPanel;
    // End of variables declaration//GEN-END:variables

//    /**
//     * Truyền vào danh sách các mặt nạ giao diện hiển thị thông tin
//     * Chú ý danh sách truyền vào phải được sắp xếp theo Level.
//     * (Giao diện thông tin cha ở vị trí 0)
//     * @param panelShowInformations : List<IPanelShowInformation>
//     * IPanelShowInformation: mặt nạ giao diện hiển thị thông tin
//     */
//    public void setListPanelShow(List<IPanelShowInformation> panelShowInformations) {
//        this.panelShowInformations = panelShowInformations;
//    }
    /**
     *  trả về danh sách các giao diện đang được hiển thị
     * @return 
     */
    public List<IPanelShowInformation> getListPanelShow() {
        return panelShowInformations;
    }

    /**
     * Thực hiện chức năng hiển thị thông tin thông qua các giao diện hiển thị thông tin truyền vào
     */
    public void showPanelInformations() {
        if (panelShowInformations == null) {
            return;
        }
        loadListInformation();
        loadGroup();
    }

    /**
     * Load các thông tin về danh sách các giao diện hiển thị thông tin
     */
    private void loadListInformation() {
        panelListInformation.setLayout(new BoxLayout(panelListInformation, BoxLayout.Y_AXIS));
        listLabelInformation = new ArrayList<JLabel>();
        for (int i = 0; i < panelShowInformations.size(); i++) {
            JLabel lb = new JLabel("<html><p>" + "   " + (i + 1) + ". " + panelShowInformations.get(i).getDescriptionPanel() + "</p><html>");
            listLabelInformation.add(lb);
            panelListInformation.add(lb);
        }
    }

    /**
     * Hiển thị giao diện hiển thị thông tin được chọn
     */
    private void showInformationChoise() {
        if (indexChoise == 0) {
            btnPreview.setEnabled(false);
        } else {
            btnPreview.setEnabled(true);
        }
        if (indexChoise == listPanelGroup.size() - 1) {
            btnNext.setEnabled(false);
        } else {
            btnNext.setEnabled(true);
        }
        if (listPanelGroup.get(indexChoise) instanceof JPanel) {
            scrollPaneShow.setViewportView(listPanelGroup.get(indexChoise));
            for (int i = 0; i < listLabelInformation.size(); i++) {
                if (i / numberPanelInGroup == indexChoise) {
                    listLabelInformation.get(i).setForeground(Color.blue);
                } else {
                    listLabelInformation.get(i).setForeground(Color.black);
                }
            }
        } else {
            scrollPaneShow.setViewportView(new JPanel());
        }
    }

    /**
     *  Reset lại dữ liệu các giao diện hiển thị thông tin
     */
    public void resetData() {
        for (int i = 0; i < panelShowInformations.size(); i++) {
            panelShowInformations.get(i).resetData();;
        }
    }

    /**
     * Thêm thông tin nhập từ giao diện hiển thị thông tin
     */
    public void addData() {
        boolean dataCorrect = true;
        if (panelShowInformations.isEmpty()) {
            return;
        }
        for (int i = 0; i < panelShowInformations.size(); i++) {
            if (!panelShowInformations.get(i).checkData()) {
                dataCorrect = false;
            }
        }
        if (!dataCorrect) {
            return;
        }
        boolean ok = true;
        long idParent = panelShowInformations.get(0).addData(0);
        if (idParent < 0) {
            ok = false;
        }
        if (idParent > 0) {
            for (int i = 1; i < panelShowInformations.size(); i++) {
                if (panelShowInformations.get(i).addData(idParent) < 0) {
                    ok = false;
                }
            }
        }
        if (ok) {
            resetData();
        }
    }

    /**
     * Load lại dữ liệu ban đầu của các giao diện hiển thị thông tin
     * Thực hiện đối với trường hợp xem,chỉnh sửa thông tin
     */
    public void refreshData() {
        for (int i = 0; i < panelShowInformations.size(); i++) {
            panelShowInformations.get(i).refreshData();;
        }
    }

    public void canEditData() {
        for (int i = 0; i < panelShowInformations.size(); i++) {
            panelShowInformations.get(i).canEditData();;
        }
    }

    /**
     * Thực hiện chức năng  sửa thông tin đã chỉnh sửa 
     * từ các giao diện hiển thị thông tin
     * Thực hiện đối với trường hợp xem,chỉnh sửa thông tin
     */
    public boolean editData() {
        boolean dataCorrect = true;
        if (panelShowInformations.isEmpty()) {
            return false;
        }
        for (int i = 0; i < panelShowInformations.size(); i++) {
            if (!panelShowInformations.get(i).checkData()) {
                dataCorrect = false;
            }
        }
        if (!dataCorrect) {
            return false;
        }
        boolean ok = true;
        for (int i = 0; i < panelShowInformations.size(); i++) {
            if (panelShowInformations.get(i).editData() < 0) {
                ok = false;
            }
        }
        if (ok) {
            resetData();
            return true;
        }
        return false;
    }

    /**
     * Thực hiện chức năng  xóa thông tin được chọn
     * từ các giao diện hiển thị thông tin
     * Thực hiện đối với trường hợp xem,chỉnh sửa thông tin
     */
    public void removeData() {
        if (panelShowInformations.isEmpty()) {
            return;
        }
        for (int i = 0; i < panelShowInformations.size(); i++) {
            panelShowInformations.get(i).removeData();;
        }
        resetData();
    }

    /**
     * Trả về chức năng đang được hiển thị
     * PanelControlShowInformation.FUNCTION_CREATE = 1
     * PanelControlShowInformation.FUNCTION_EDIT = 2;
     * FUNCTION_CREATE: trường hợp tạo mới, thêm mới thông tin
     * FUNCTION_EDIT: trường hợp xem,chỉnh sửa thông tin
     * @return 
     */
    public int getFunction() {
        if (panelShowInformations.size() > 0) {
            return panelShowInformations.get(0).getFunction();
        }
        return 0;
    }

    public void processPanelInformation() {
        panelShowListInformation.setVisible(!panelShowListInformation.isVisible());
    }

    private void loadGroup() {
        listPanelGroup = new ArrayList<JPanel>();
        if (numberPanelInGroup > 0) {
            int numberGroup = (panelShowInformations.size() + numberPanelInGroup - 1) / numberPanelInGroup;
            int j = 0;
            for (int i = 0; i < numberGroup; i++) {
                JPanel panel = new JPanel();
                if (numberPanelInGroup > 1) {
                    panel.setLayout(new GridLayout(0, 2));
                } else {
                    panel.setLayout(new GridLayout(0, 1));
                }
                for (int k = 0; k < numberPanelInGroup; k++) {
                    if (j >= panelShowInformations.size()) {
                        break;
                    }
                    if (panelShowInformations.get(j) instanceof JPanel) {
                        panel.add((JPanel) panelShowInformations.get(j));
                    }
                    j++;
                }
                listPanelGroup.add(panel);
            }
        }
        if (listPanelGroup.size() <= 1) {
            btnNext.setVisible(false);
            btnPreview.setVisible(false);
        } else if (listPanelGroup.size() > 1) {
            btnNext.setVisible(true);
            btnPreview.setVisible(true);
        }
        if (listPanelGroup.size() >= 1) {
            indexChoise = 0;
            showInformationChoise();
        }
    }

    public void loadDeault() {
        for (int i = 0; i < panelShowInformations.size(); i++) {
            panelShowInformations.get(i).loadDefault();
        }
    }
}
