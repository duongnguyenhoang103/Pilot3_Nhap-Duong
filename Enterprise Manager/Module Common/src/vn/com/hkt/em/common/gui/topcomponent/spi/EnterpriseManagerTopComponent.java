/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.com.hkt.em.common.gui.topcomponent.spi;

import javax.swing.JPanel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import vn.com.hkt.em.common.gui.panel.control.function.api.IPanelControlFunctionTotal;
import vn.com.hkt.em.common.gui.panel.control.function.spi.PanelControlFunctionInformation;
import vn.com.hkt.em.common.gui.panel.control.function.spi.PanelControlFunctionListInformation;


@ConvertAsProperties(dtd = "-//vn.com.hkt.cm.basic.gui.spi//EnterpriseManager//EN",
autostore = false)
@TopComponent.Description(preferredID = "EnterpriseManagerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "vn.com.hkt.cm.basic.gui.spi.EnterpriseManagerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_EnterpriseManagerAction",
preferredID = "EnterpriseManagerTopComponent")
public final class EnterpriseManagerTopComponent extends TopComponent {

    private IPanelControlFunctionTotal presentation;// giao diện điều khiển chức năng

    public EnterpriseManagerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(EnterpriseManagerTopComponent.class, "CTL_EnterpriseManagerTopComponent"));
        setToolTipText(NbBundle.getMessage(EnterpriseManagerTopComponent.class, "HINT_EnterpriseManagerTopComponent"));
        showPanelControlFunction();
    }    
    
    public EnterpriseManagerTopComponent(IPanelControlFunctionTotal controlFunctionTotal) {
        initComponents();        
        presentation = controlFunctionTotal;
        presentation.setTopComponent(this);         
        showPanelControlFunction();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        scrollPane.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if (presentation != null && presentation instanceof PanelControlFunctionListInformation) {
            ((PanelControlFunctionListInformation) presentation).getPanelControlShowListInformation().loadData();
        }
        if (presentation != null && presentation instanceof PanelControlFunctionInformation) {
            ((PanelControlFunctionInformation) presentation).loadDefault();
        }
    }//GEN-LAST:event_formComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");

    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

    }

    /**
     * Thực hiện hiển thị giao diện điều khiển chức năng
     * @param panelControlFunctionTotal: giao diện diều khiển chức năng
     */
    private void showPanelControlFunction() {
        if (presentation instanceof JPanel) {
            scrollPane.setViewportView((JPanel) presentation);
        } else {
            scrollPane.setViewportView(new JPanel());
        }
    }
    public void loadDefault(){
        presentation.loadDefault();
    }    
}
